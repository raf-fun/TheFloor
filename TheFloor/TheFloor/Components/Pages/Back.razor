@using TheFloor.Model

@inject IJSRuntime JS

@if (!IsStarted)
{
    <button class="btn btn-primary mb-3" @onclick="StartCountdown">Start</button>
}

@if (IsStarted && startCountdown > 0)
{
    <div class="d-flex flex-column align-items-center justify-content-center vh-100 text-center">
        <h1>@startCountdown</h1>
    </div>
}

@if (IsStarted && startCountdown <= 0 && category != null)
{
    <div class="d-flex flex-column align-items-center justify-content-center vh-100 text-center">
        @if (showPictureName)
        {
            <h4>@currentPicture.Name.Split('.')[0]</h4>
        }

        <div class="d-flex align-items-center justify-content-center" style="width: 80%; height: 60vh;">
            <TimerScore Name="@Challenger.Name" Score="@ChallengerScore"
                        TimerValue="@ChallengerTimerValue" TimerValueChanged="@(value => ChallengerTimerValue = value)"
                        IsActive="!ChallengerLastWhent" Timer="ChallengerTimer" />

            <div class="image-wrapper d-flex align-items-center justify-content-center" style="width: 80%; height: 60vh;">
                @if (currentPicture != null)
                {
                    <img src="@currentPicture.Url" alt="@currentPicture.Name" class="img-fluid" style="width: 100%; height: 100%; object-fit: contain;" />
                }
                else
                {
                    <h3 style="color:red">No more Pictures</h3>
                }
            </div>

            <TimerScore Name="@category.Name" Score="@ChallengeeScore"
                        TimerValue="@ChallengeeTimerValue" TimerValueChanged="@(value => ChallengeeTimerValue = value)"
                        IsActive="ChallengerLastWhent" Timer="ChallengeeTimer" />
        </div>

        <div class="d-flex justify-content-around w-100 mt-3">
            <button class="btn btn-success w-50 me-2" @onclick="CheckClicked" disabled="@(TimerZero || disableAnswerButtons)">
                <i class="fa-solid fa-check fa-xl"></i>
            </button>
            <button class="btn btn-danger w-50 ms-2" @onclick="XClicked" disabled="@(TimerZero || disableAnswerButtons)">
                <i class="fa-solid fa-x fa-xl"></i>
            </button>
        </div>

        <button class="btn btn-primary mt-3 mb-3" @onclick="ResestAndClose">Close</button>

        @if (TimerZero)
        {
            <div class="mt-3">
                @if (ChallengerTimerValue <= 0)
                {
                    <h1>Congrats on defending your category! You will now be @Challenger.Name.</h1>
                }
                else if (ChallengeeTimerValue <= 0)
                {
                    <h1>The challenger category @Challenger.Name has won this round.</h1>
                }
            </div>
        }
    </div>
}



@code {
    [Parameter]
    public required Category category { get; set; }

    [Parameter]
    public EventCallback Close { get; set; }

    [Parameter]
    public required Category Challenger { get; set; }

    public bool IsStarted { get; set; } = false;
    public bool disableAnswerButtons { get; set; } = false;
    public bool showPictureName { get; set; } = false;

    public int ChallengerTimerValue { get; set; }
    public int ChallengeeTimerValue { get; set; }
    public bool TimerZero { get; set; }

    public System.Timers.Timer ChallengerTimer { get; set; } = new();
    public System.Timers.Timer ChallengeeTimer { get; set; } = new();

    public int ChallengerScore { get; set; }
    public int ChallengeeScore { get; set; }

    public bool ChallengerLastWhent { get; set; } = false;

    private FileData currentPicture;
    private HashSet<string> shownPictures = new();

    private const int countdown = 45;

    private const int startCountdownDuration = 3;
    private int startCountdown = startCountdownDuration;

    private const int countdownInterval = 1000;


    protected override async Task OnParametersSetAsync()
    {
        if (category?.Images != null && category.Images.Any())
        {
            await ShowRandomPicture();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("keyHandler.initialize", DotNetObjectReference.Create(this));
        }
    }

    private async Task StartCountdown()
    {
        IsStarted = true;

        while (startCountdown > 0)
        {
            StateHasChanged();
            await Task.Delay(countdownInterval);
            startCountdown--;
        }

        StartTimer();
    }

    private async Task CheckClicked()
    {
        await JS.InvokeVoidAsync("playCorrectSound");
        await SwitchTimerAndScore(true);
    }

    private async Task XClicked()
    {
        await JS.InvokeVoidAsync("playWrongSound");
        showPictureName = true;
        disableAnswerButtons = true;
        await Task.Delay(3000);
        showPictureName = false;
        await SwitchPicture();
        disableAnswerButtons = false;
    }

    private async Task SwitchTimerAndScore(bool check = false)
    {
        if (ChallengerLastWhent)
        {
            if (check)
            {
                ChallengerScore++;
            }

            StartChallengeeTimer();
        }
        else
        {
            if (check)
            {
                ChallengeeScore++;
            }
            StartChallengerTimer();
        }

        await ShowRandomPicture();
    }

    private async Task ShowRandomPicture()
    {
        ChallengerLastWhent = !ChallengerLastWhent;
        await SwitchPicture();
    }

    private async Task SwitchPicture()
    {
        var remainingPictures = category.Images.Where(img => !shownPictures.Contains(img.Url)).ToList();

        if (remainingPictures.Any())
        {
            var random = new Random();
            currentPicture = remainingPictures[random.Next(remainingPictures.Count)];
            shownPictures.Add(currentPicture.Url);
        }
        else
        {
            currentPicture = null!;
        }

        if (currentPicture != null)
        {
            await JS.InvokeVoidAsync("updateImageName", currentPicture.Name.Split('.')[0]);
        }
        StateHasChanged();
    }

    [JSInvokable]
    public Task HandleXKey()
    {
        if (TimerZero)
        {
            return Task.CompletedTask;
        }
        return XClicked();
    }

    [JSInvokable]
    public Task HandleCheckKey()
    {
        if (TimerZero)
        {
            return Task.CompletedTask;
        }
        return CheckClicked();
    }

    private void StartChallengerTimer()
    {
        ChallengeeTimer?.Stop();
        ChallengerTimer = new System.Timers.Timer(1000); // 1 second interval
        ChallengerTimer.Elapsed += OnChallengerTimerElapsed;
        ChallengerTimer.Start();
    }

    private void StartChallengeeTimer()
    {
        ChallengerTimer?.Stop();
        ChallengeeTimer = new System.Timers.Timer(1000); // 1 second interval
        ChallengeeTimer.Elapsed += OnChallengeeTimerElapsed;
        ChallengeeTimer.Start();
    }

    private void OnChallengerTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            if (ChallengerTimerValue <= 0)
            {
                TimerZero = true;
                ChallengerTimer.Stop();
            }
            else
            {
                ChallengerTimerValue--;
            }
            StateHasChanged();
        });
    }

    private void OnChallengeeTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            if (ChallengeeTimerValue <= 0)
            {
                TimerZero = true;
                ChallengeeTimer.Stop();
            }
            else
            {
                ChallengeeTimerValue--;
            }
            StateHasChanged();
        });
    }

    private void StartTimer()
    {
        IsStarted = true;
        ChallengerTimerValue = countdown;
        ChallengeeTimerValue = countdown;
        StartChallengerTimer();
    }

    public void ResestAndClose()
    {
        Close.InvokeAsync();
        IsStarted = false;
        disableAnswerButtons = false;
        showPictureName = false;

        ChallengerTimerValue = 0;
        ChallengeeTimerValue = 0;
        TimerZero = false;

        ChallengerTimer = new();
        ChallengeeTimer = new();

        ChallengerScore = 0;
        ChallengeeScore = 0;

        ChallengerLastWhent = false;

        shownPictures = new();
        startCountdown = startCountdownDuration;
        ChallengeeTimer?.Dispose();
        ChallengerTimer?.Dispose();
    }
}
