@using System.Timers
@implements IDisposable

<div class="d-flex flex-column align-items-center">
    <h5 style="color:@(IsActive ? "red" : "")">@Name</h5>
    @* <span class="fs-3">@Score</span> *@
    <span class="fs-3">Timer: @TimerValue seconds</span>
</div>

@code {
    [Parameter]
    public required string Name { get; set; }

    [Parameter]
    public required int Score { get; set; }

    [Parameter]
    public required int TimerValue { get; set; }

    [Parameter]
    public required EventCallback<int> TimerValueChanged { get; set; }

    [Parameter]
    public required bool IsActive { get; set; }

    [Parameter]
    public required Timer Timer { get; set; }

    [Parameter]
    public required EventCallback TimerZero { get; set; }

    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (IsActive)
        {
            await InvokeAsync(async () =>
            {
                TimerValue--;
                await TimerValueChanged.InvokeAsync(TimerValue);
                if (TimerValue <= 0)
                {
                    Timer.Stop();
                    await TimerZero.InvokeAsync();
                }
                StateHasChanged();
            });
        }
    }

    protected override void OnInitialized()
    {
        Timer.Elapsed -= OnTimerElapsed;
        Timer.Elapsed += OnTimerElapsed;
    }

    public void Dispose()
    {
        Timer.Elapsed -= OnTimerElapsed;
        Timer.Stop();
    }
}