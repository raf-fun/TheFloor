@page "/"
@using TheFloor.Model
@rendermode InteractiveServer

@inject IJSRuntime JS


<PageTitle>Home</PageTitle>

<div>
    <button class="btn btn-primary" @onclick="LoadImages">Load Images</button>
</div>
@if (categories == null || !categories.Any())
{
    <p>No folders selected.</p>
}
else
{
    <h4>Selected Folders</h4>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
        @foreach (var category in categories)
        {
            <div class="col">
                <div class="card h-100" style="background-color: @category.BgColor;" @onclick="() => ShowBack(category)">
                    <div class="card-body">
                        <h5 class="card-title">@category.Name</h5>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (selectedCategory != null)
{
    <div class="fullscreen">
        <Back category="selectedCategory" Close="HideBack" Challenger="ChallengerCategory"/>
    </div>
}


@code {
    private List<FolderData> selectedFolders = new();
    private FolderData selectedFolder;

    private List<Category> categories = new();
    private Category selectedCategory;

    public Category ChallengerCategory {get; set;}

    public async Task LoadImages()
    {
        try
        {
            Console.WriteLine("Picker called.");

            var folders = await JS.InvokeAsync<FolderData[]>("GetFolderFiles");
            if (folders != null)
            {
                Console.WriteLine($"Received {folders.Length} folders");
                selectedFolders = folders.ToList();

                var colors = new List<string> { "#FF5733", "#33FF57", "#3357FF", "#F033FF", "#FF33A1", "#33FFA1", "#FFA133", "#A1FF33" };
                //var random = new Random();
                categories = selectedFolders.Select((folder, index) => new Category
                    {
                        Name = System.IO.Path.GetFileName(folder.Path),
                        Images = folder.Files,
                        BgColor = colors[index % colors.Count]
                    }).ToList();
            }
            else
            {
                Console.WriteLine("No folders received");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error picking folder: {ex.Message}");
        }
    }

    private void ShowBack(Category category)
    {
        selectedCategory = category;
        ChallengerCategory = category;
    }

    private void HideBack()
    {
        selectedCategory = null;
    }
}
