@page "/counter"
@rendermode InteractiveAuto

@inject IJSRuntime JS

<PageTitle>Counter</PageTitle>

<div>
    <label for="numItems">Number of Items:</label>
    <input type="number" id="numItems" @bind="NumberOfItems" min="1" />
</div>
<div>
    <label for="itemsPerRow">Items Per Row:</label>
    <input type="number" id="itemsPerRow" @bind="ItemsPerRow" min="1" />
</div>

<div class="grid-container">
    @foreach (var item in Enumerable.Range(1, NumberOfItems))
    {
        <div class="grid-item" id=@($"item{@item}") @onclick='() => ToggleAnimation($"item{item}")'>
            <div class="card">
                <div class="front">@item</div>
                <div class="back"><BackTile></BackTile></div>
            </div>
        </div>
    }
</div>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(@(ItemsPerRow), 1fr);
        gap: 10px;
        padding: 20px;
    }

    .grid-item {
        perspective: 1000px;
        width: 100%;
        height: 150px;
    }

    .card {
        position: relative;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
        transition: transform 0.5s ease-in-out;
    }

        .card .front,
        .card .back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        .card .front {
            background-color: lightblue;
            border: 1px solid #000;
        }

        .card .back {
            background-color: lightcoral;
            border: 1px solid #000;
            transform: rotateY(180deg);
        }

    .animate .card {
        transform: rotateY(180deg) scale(1.2);
    }

    .fullscreen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 9999;
        transform: rotateY(180deg);
    }
</style>


@code {
    private int NumberOfItems { get; set; } = 6;
    private int ItemsPerRow { get; set; } = 3;
    private string? ActiveItem { get; set; }

    private async Task ToggleAnimation(string itemId)
    {
        if (ActiveItem == itemId)
        {
            ActiveItem = null;
        }
        else
        {
            ActiveItem = itemId;
        }
        await JS.InvokeVoidAsync("toggleFullScreenAnimation", itemId, ActiveItem != null);
    }
}
